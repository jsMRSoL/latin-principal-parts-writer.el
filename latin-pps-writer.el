;;; latin-pps-writer.el --- Convert principal parts to lines for bulk flashcard uploads -*- lexical-binding: t -*-

;; working with

;; habeo, habere, habui, habitus: have
;; fero, ferre, tuli, latus: bear
;; agito, agitare, agitavi, agitatus: chase
;; invenio, invenire, inveni, inventus: find


(defvar sp/english-irregular-verbs-table
  (let ((table (make-hash-table :test 'equal)))
    (puthash "awake" '("awake" "awakes" "awoke" "awoken" "awaking") table)
    (puthash "be" '("be" "is" "was" "been" "being") table)
    (puthash "bear" '("bear" "bears" "bore" "borne" "bearing") table)
    (puthash "beat" '("beat" "beats" "beat" "beaten" "beating") table)
    (puthash "become" '("become" "becomes" "became" "become" "becoming") table)
    (puthash "begin" '("begin" "begins" "began" "begun" "beginning") table)
    (puthash "bend" '("bend" "bends" "bent" "bent" "bending") table)
    (puthash "bet" '("bet" "bets" "bet" "bet" "betting") table)
    (puthash "bid" '("bid" "bids" "bid" "bid" "bidding") table)
    (puthash "bite" '("bite" "bites" "bit" "bitten" "biting") table)
    (puthash "bleed" '("bleed" "bleeds" "bled" "bled" "bleeding") table)
    (puthash "blow" '("blow" "blows" "blew" "blown" "blowing") table)
    (puthash "break" '("break" "breaks" "broke" "broken" "breaking") table)
    (puthash "breed" '("breed" "breeds" "bred" "bred" "breeding") table)
    (puthash "bring" '("bring" "brings" "brought" "brought" "bringing") table)
    (puthash "broadcast" '("broadcast" "broadcasts" "broadcast" "broadcast" "broadcasting") table)
    (puthash "build" '("build" "builds" "built" "built" "building") table)
    (puthash "burn" '("burn" "burns" "burnt/burned" "burnt/burned" "burning") table)
    (puthash "burst" '("burst" "bursts" "burst" "burst" "bursting") table)
    (puthash "buy" '("buy" "buys" "bought" "bought" "buying") table)
    (puthash "catch" '("catch" "catches" "caught" "caught" "catching") table)
    (puthash "choose" '("choose" "chooses" "chose" "chosen" "choosing") table)
    (puthash "come" '("come" "comes" "came" "come" "coming") table)
    (puthash "cost" '("cost" "costs" "cost" "cost" "costing") table)
    (puthash "cut" '("cut" "cuts" "cut" "cut" "cutting") table)
    (puthash "deal" '("deal" "deals" "dealt" "dealt" "dealing") table)
    (puthash "dig" '("dig" "digs" "dug" "dug" "digging") table)
    (puthash "do" '("do" "does" "did" "done" "doing") table)
    (puthash "draw" '("draw" "draws" "drew" "drawn" "drawing") table)
    (puthash "dream" '("dream" "dreams" "dreamt/dreamed" "dreamt/dreamed" "dreaming") table)
    (puthash "drink" '("drink" "drinks" "drank" "drunk" "drinking") table)
    (puthash "drive" '("drive" "drives" "drove" "driven" "driving") table)
    (puthash "eat" '("eat" "eats" "ate" "eaten" "eating") table)
    (puthash "fall" '("fall" "falls" "fell" "fallen" "falling") table)
    (puthash "feed" '("feed" "feeds" "fed" "fed" "feeding") table)
    (puthash "feel" '("feel" "feels" "felt" "felt" "feeling") table)
    (puthash "fight" '("fight" "fights" "fought" "fought" "fighting") table)
    (puthash "find" '("find" "finds" "found" "found" "finding") table)
    (puthash "fly" '("fly" "flies" "flew" "flown" "flying") table)
    (puthash "forget" '("forget" "forgets" "forgot" "forgotten" "forgetting") table)
    (puthash "forgive" '("forgive" "forgives" "forgave" "forgiven" "forgiving") table)
    (puthash "freeze" '("freeze" "freezes" "froze" "frozen" "freezing") table)
    (puthash "get" '("get" "gets" "got" "got" "getting") table)
    (puthash "give" '("give" "gives" "gave" "given" "giving") table)
    (puthash "go" '("go" "goes" "went" "gone" "going") table)
    (puthash "grind" '("grind" "grinds" "ground" "ground" "grinding") table)
    (puthash "grow" '("grow" "grows" "grew" "grown" "growing") table)
    (puthash "hang" '("hang" "hangs" "hung" "hung" "hanging") table)
    (puthash "have" '("have" "has" "had" "had" "having") table)
    (puthash "hear" '("hear" "hears" "heard" "heard" "hearing") table)
    (puthash "hide" '("hide" "hides" "hid" "hidden" "hiding") table)
    (puthash "hit" '("hit" "hits" "hit" "hit" "hitting") table)
    (puthash "hold" '("hold" "holds" "held" "held" "holding") table)
    (puthash "hurt" '("hurt" "hurts" "hurt" "hurt" "hurting") table)
    (puthash "keep" '("keep" "keeps" "kept" "kept" "keeping") table)
    (puthash "know" '("know" "knows" "knew" "known" "knowing") table)
    (puthash "lay" '("lay" "lays" "laid" "laid" "laying") table)
    (puthash "lead" '("lead" "leads" "led" "led" "leading") table)
    (puthash "leave" '("leave" "leaves" "left" "left" "leaving") table)
    (puthash "lend" '("lend" "lends" "lent" "lent" "lending") table)
    (puthash "let" '("let" "lets" "let" "let" "letting") table)
    (puthash "lie" '("lie" "lies" "lay" "lain" "lying") table)
    (puthash "lose" '("lose" "loses" "lost" "lost" "losing") table)
    (puthash "make" '("make" "makes" "made" "made" "making") table)
    (puthash "mean" '("mean" "means" "meant" "meant" "meaning") table)
    (puthash "meet" '("meet" "meets" "met" "met" "meeting") table)
    (puthash "pay" '("pay" "pays" "paid" "paid" "paying") table)
    (puthash "put" '("put" "puts" "put" "put" "putting") table)
    (puthash "quit" '("quit" "quits" "quit" "quit" "quitting") table)
    (puthash "read" '("read" "reads" "read" "read" "reading") table)
    (puthash "ride" '("ride" "rides" "rode" "ridden" "riding") table)
    (puthash "ring" '("ring" "rings" "rang" "rung" "ringing") table)
    (puthash "rise" '("rise" "rises" "rose" "risen" "rising") table)
    (puthash "run" '("run" "runs" "ran" "run" "running") table)
    (puthash "say" '("say" "says" "said" "said" "saying") table)
    (puthash "see" '("see" "sees" "saw" "seen" "seeing") table)
    (puthash "sell" '("sell" "sells" "sold" "sold" "selling") table)
    (puthash "send" '("send" "sends" "sent" "sent" "sending") table)
    (puthash "set" '("set" "sets" "set" "set" "setting") table)
    (puthash "shake" '("shake" "shook" "shaken" "shaking") table)
    (puthash "shed" '("shed" "shed" "shed" "shedding") table)
    (puthash "shine" '("shine" "shone" "shone" "shining") table)
    (puthash "shoot" '("shoot" "shot" "shot" "shooting") table)
    (puthash "show" '("show" "showed" "shown" "showing") table)
    (puthash "shut" '("shut" "shut" "shut" "shutting") table)
    (puthash "sing" '("sing" "sang" "sung" "singing") table)
    (puthash "sink" '("sink" "sank" "sunk" "sinking") table)
    (puthash "sit" '("sit" "sat" "sat" "sitting") table)
    (puthash "sleep" '("sleep" "slept" "slept" "sleeping") table)
    (puthash "speak" '("speak" "spoke" "spoken" "speaking") table)
    (puthash "spend" '("spend" "spent" "spent" "spending") table)
    (puthash "spill" '("spill" "spilled/spilt" "spilled/spilt" "spilling") table)
    (puthash "stand" '("stand" "stood" "stood" "standing") table)
    (puthash "steal" '("steal" "stole" "stolen" "stealing") table)
    (puthash "stick" '("stick" "stuck" "stuck" "sticking") table)
    (puthash "sting" '("sting" "stung" "stung" "stinging") table)
    (puthash "stink" '("stink" "stank" "stunk" "stinking") table)
    (puthash "stride" '("stride" "strode" "stridden" "striding") table)
    (puthash "strike" '("strike" "struck" "struck" "striking") table)
    (puthash "swear" '("swear" "swore" "sworn" "swearing") table)
    (puthash "sweep" '("sweep" "swept" "swept" "sweeping") table)
    (puthash "swim" '("swim" "swam" "swum" "swimming") table)
    (puthash "swing" '("swing" "swung" "swung" "swinging") table)
    (puthash "take" '("take" "took" "taken" "taking") table)
    (puthash "teach" '("teach" "taught" "taught" "teaching") table)
    (puthash "tear" '("tear" "tore" "torn" "tearing") table)
    (puthash "tell" '("tell" "told" "told" "telling") table)
    (puthash "think"   '("think" "thinks" "thought" "thought" "thinking") table)
    (puthash "throw"   '("throw" "throws" "threw" "thrown" "throwing") table)
    (puthash "understand" '("understand" "understands" "understood" "understood" "understanding") table)
    (puthash "wake"    '("wake" "wakes" "woke" "woken" "waking") table)
    (puthash "wear"    '("wear" "wears" "wore" "worn" "wearing") table)
    (puthash "win"     '("win" "wins" "won" "won" "winning") table)
    (puthash "write"   '("write" "writes" "wrote" "written" "writing") table)
    table))

(defun sp/latin-pps--check-eng-and-write (latin-pps eng-basic)
  (let ((eng-pps (gethash eng-basic sp/english-irregular-verbs-table :NF)))
    (if (equal eng-pps :NF)
	(sp/latin-pps--write-regular latin-pps eng-basic)
      (sp/latin-pps--write-irregular latin-pps eng-pps))))

(defun sp/latin-pps--write-regular (latin-pps eng-base)
  (let* ((eng-base-bare (string-trim-right eng-base "e"))
	 (answer-string (concat
     (format "%s : I %s\n" (nth 0 latin-pps) eng-base)
     (format "%s : to %s\n" (nth 1 latin-pps) eng-base)
     (when (>= (length latin-pps) 3)
       (format "%s : I %sed\n" (nth 2 latin-pps) eng-base-bare))
     (when (= (length latin-pps) 4)
       (format "%s : having been %sed\n" (nth 3 latin-pps) eng-base-bare)))))
    answer-string))

;; (sp/latin-pps--write-regular '("agito" "agitare" "agitavi" "agitatus") "chase")

(defun sp/latin-pps--write-irregular (latin-pps eng-pps)
  (concat
   (format "%s : I %s\n" (nth 0 latin-pps) (nth 0 eng-pps))
   (format "%s : to %s\n" (nth 1 latin-pps) (nth 0 eng-pps))
   (when (>= (length latin-pps) 3)
     (format "%s : I %s\n" (nth 2 latin-pps) (nth 2 eng-pps)))
   (when (= (length latin-pps) 4)
     (format "%s : having been %s\n" (nth 3 latin-pps) (nth 3 eng-pps)))))

(defvar sp/latin-pps--latin-eng-split-token nil
  "The user will be asked for the split char on the first run
   of sp/latin-pps-and-translation")

(defun sp/latin-pps--fetch-text (start end)
  (let* ((text (string-trim-right
		(buffer-substring-no-properties start end) "\n"))
	 (split-var (if sp/latin-pps--latin-eng-split-token
			sp/latin-pps--latin-eng-split-token
		      (setq sp/latin-pps--latin-eng-split-token (read-string "Split Latin and meaning on: " ":"))))
	 (verb-and-meaning (string-split text split-var t " "))
	 (verb-string (nth 0 verb-and-meaning))
	 (pps (string-split verb-string "," t " "))
	 (meaning (nth 1 verb-and-meaning)))
    (list pps meaning)))

;; (defun sp/test-latin-pps--fetch-text ()
;;   (interactive)
;;   (message "%S" (sp/latin-pps--fetch-text (region-beginning) (region-end))))

;;;###autoload
(defun sp/split-latin-pps-and-translation (start end)
  (interactive
   (list (region-beginning) (region-end)))
  (when (region-active-p)
    (let*
	((latin-pps-and-meaning (sp/latin-pps--fetch-text start end))
         (latin-pps (nth 0 latin-pps-and-meaning))
	 (meaning (nth 1 latin-pps-and-meaning))
	 (answer-string 
	  (sp/latin-pps--check-eng-and-write latin-pps meaning)))
      (delete-region start end)
      (insert answer-string)))
  (unless (region-active-p)
    (message "No region selected. Aborting...")))

;; (setq latin-pps-and-meaning '(("fero" "ferre" "tuli" "latus") "bear"))

(provide 'latin-pps-writer)
;;; latin-pps-writer.el ends here
